#include <Arduino.h>
#define XCLK_PIN 32   // Ch√¢n ESP32 xu·∫•t XCLK -> n·ªëi v√†o XCLK camera
// ================== PH·∫¶N 1: CH√ÇN K·∫æT N·ªêI ==================
#define OV7670_PIN_PCLK   27
#define OV7670_PIN_VSYNC  25
#define OV7670_PIN_HREF   26
#define OV7670_PIN_XCLK   32
#define OV7670_PIN_D0     33
#define OV7670_PIN_D1     12
#define OV7670_PIN_D2     13
#define OV7670_PIN_D3     14
#define OV7670_PIN_D4     15
#define OV7670_PIN_D5     2
#define OV7670_PIN_D6     4
#define OV7670_PIN_D7     5
#define OV7670_PIN_SIOC   22
#define OV7670_PIN_SIOD   21

// ================== PH·∫¶N 2: KHAI B√ÅO OV7670 DRIVER ==================
#include "OV7670.h"
#define FRAME_WIDTH  160
#define FRAME_HEIGHT 120

OV7670 camera(
  OV7670_PIN_SIOC, OV7670_PIN_SIOD,
  OV7670_PIN_XCLK, OV7670_PIN_PCLK,
  OV7670_PIN_VSYNC, OV7670_PIN_HREF,
  OV7670_PIN_D0, OV7670_PIN_D1, OV7670_PIN_D2, OV7670_PIN_D3,
  OV7670_PIN_D4, OV7670_PIN_D5, OV7670_PIN_D6, OV7670_PIN_D7,
  FRAME_WIDTH, FRAME_HEIGHT
);

// ================== PH·∫¶N 3: QUIRC QR DECODER ==================
extern "C" {
  #include <quirc.h>
}

struct quirc *qr;
uint8_t *gray_buf;
uint8_t *frame;  // ‚úÖ chuy·ªÉn sang con tr·ªè ƒë·ªÉ c·∫•p ph√°t ƒë·ªông

// ================== PH·∫¶N 4: H√ÄM CHUY·ªÇN ·∫¢NH ==================
void convertToGrayscale(uint8_t *rgb565, uint8_t *gray, int w, int h) {  ////uint8_t*rgb565: con tr·ªè v·ªÅ m·∫£ng byte ·∫£nh ch·ª©a d·ªØ li·ªáu ki·ªÉu ·∫£nh rgb565
  for (int i = 0; i < w * h; i++) {                                      ///uint8_t*gray: con tr·ªè v·ªÅ m·∫£ng ch·ª©a ·∫£nh x√°m
    uint16_t pixel = ((uint16_t*)rgb565)[i];   //l·∫•y gi√° tr·ªã 16bit c·ªßa m·ªôt pixel m√†u
    uint8_t r = ((pixel >> 11) & 0x1F) << 3;   //t√°ch 5 bit m√†u ƒë·ªè,sau ƒë√≥ d·ªãch sang tr√°i 3 bit ƒë·ªÉ m·ªü r·ªông th√†nh 8bit
    uint8_t g = ((pixel >> 5) & 0x3F) << 2;    //t√°ch 6bit m√†u xanh l√°,d·ªãch tr√°i 2bit ƒë·ªÉ m·ªü r·ªông th√†nh 8bit
    uint8_t b = (pixel & 0x1F) << 3;           //t√°ch 5bit m√†u xanh d∆∞∆°ng,d·ªãch tr√°i 3bit ƒë·ªÉ m·ªü r·ªông th√†nh 8bit
    gray[i] = (r * 30 + g * 59 + b * 11) / 100;//c√¥ng th·ª©c chuy·ªÉn ƒë·ªïi t·ª´ m√†u RGB sang gi√° tr·ªã ƒë·ªô s√°ng cho ·∫£nh x√°m
  }
}

// ================== PH·∫¶N 5: SETUP ==================
//////////////
volatile bool vsyncFlag = false;

void IRAM_ATTR vsyncISR() {
  vsyncFlag = true;
}
///////////

void setup() {
////////
  



/////////
  Serial.begin(115200);
  delay(2000);
////////
Serial.println("üöÄ B·∫Øt ƒë·∫ßu test XCLK cho OV7670...");

  // ===== T·∫°o PWM tr√™n ch√¢n XCLK =====
  ledcAttachPin(XCLK_PIN, 0);       // Channel 0
  ledcSetup(0, 8000000, 1);       // 8 MHz, ƒë·ªô ph√¢n gi·∫£i 1 bit (ch·ªâ 0/1)
  ledcWrite(0, 1);                  // B·∫≠t PWM

  Serial.println("‚úÖ XCLK ƒë√£ ƒë∆∞·ª£c xu·∫•t ra pin 32 (8 MHz)");

  // ===== G·ªçi h√†m setPCLK trong th∆∞ vi·ªán =====
  camera.setPCLK(1, 0); // VD: chia clock /2, kh√¥ng d√πng PLL
  Serial.println("üì° ƒê√£ c·∫•u h√¨nh PCLK (chia 2, PLL bypass).");

  // B√°o hi·ªáu test ch·∫°y
  pinMode(2, OUTPUT); // LED on-board
  //////
  
  Serial.println("üöÄ Kh·ªüi ƒë·ªông camera OV7670...");

  qr = quirc_new();
  if (!qr) {
    Serial.println("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c quirc struct");
    while (1);
  }

  if (quirc_resize(qr, FRAME_WIDTH, FRAME_HEIGHT) < 0) {
    Serial.println("‚ùå Kh√¥ng resize ƒë∆∞·ª£c quirc");
    while (1);
  }

  gray_buf = (uint8_t*)malloc(FRAME_WIDTH * FRAME_HEIGHT);
  if (!gray_buf) {
    Serial.println("‚ùå Kh√¥ng c·∫•p ph√°t ƒë∆∞·ª£c b·ªô nh·ªõ grayscale");
    while (1);
  }

  frame = (uint8_t*)malloc(FRAME_WIDTH * FRAME_HEIGHT);  // ‚úÖ c·∫•p ph√°t ƒë·ªông
  if (!frame) {
    Serial.println("‚ùå Kh√¥ng c·∫•p ph√°t ƒë∆∞·ª£c b·ªô nh·ªõ frame");
    while (1);
  }

  Serial.println("‚úÖ Camera v√† quirc ƒë√£ s·∫µn s√†ng!");
}

// ================== PH·∫¶N 6: LOOP ==================
void loop() {
  camera.getFrame(frame);
  //
  delay(100);
  //
  

  Serial.println("üì∏ Ki·ªÉm tra d·ªØ li·ªáu ·∫£nh:");
for (int i = 0; i < 10; i++) {
  uint16_t pixel = ((uint16_t*)frame)[i];
  Serial.printf("Pixel %d: 0x%04X\n", i, pixel);
}

  convertToGrayscale(frame, gray_buf, FRAME_WIDTH, FRAME_HEIGHT);
  int brightness = 0;
  for (int i = 0; i < FRAME_WIDTH * FRAME_HEIGHT; i++) {
    brightness += gray_buf[i];
}
  brightness /= (FRAME_WIDTH * FRAME_HEIGHT);
  Serial.printf("üåï ƒê·ªô s√°ng trung b√¨nh: %d\n", brightness);
  Serial.println("üß™ M·∫´u ·∫£nh x√°m:");
for (int i = 0; i < 20; i++) {
  Serial.printf("%3d ", gray_buf[i]);
}
Serial.println();


//////////
if (vsyncFlag) {
  Serial.println("üì∂ VSYNC b√°o frame m·ªõi!");
  vsyncFlag = false;
}
/////////////////


  uint8_t *qimage = quirc_begin(qr, NULL, NULL);
  memcpy(qimage, gray_buf, FRAME_WIDTH * FRAME_HEIGHT);
  quirc_end(qr);

  int count = quirc_count(qr);
  if (count > 0) {
    Serial.printf("üì∑ Ph√°t hi·ªán %d QR code!\n", count);
    for (int i = 0; i < count; i++) {
      struct quirc_code *code = (struct quirc_code*)malloc(sizeof(struct quirc_code));
      struct quirc_data *data = (struct quirc_data*)malloc(sizeof(struct quirc_data));

      if (code && data) {
        quirc_extract(qr, i, code);
        if (!quirc_decode(code, data)) {
          Serial.print("üîç QR content: ");
          Serial.println((char*)data->payload);
        }
      }

      free(code);
      free(data);
    }
  } else {
    Serial.println("...Kh√¥ng th·∫•y QR");
  }

  delay(1000);
}



